= content_for :head do
  title= article.meta_title
  meta name='description' content=clean_truncate(article.body)
  meta name='og:type' content='website'
  meta property='og:title' content=article.meta_title
  meta property='og:url' content=request.original_url
  meta property='og:image' content=article.picture_url
  meta property='og:description' content=clean_truncate(article.body)
  meta property='og:updated_time' content=article.updated_at.to_i
  meta property='fb:app_id' content=639665256206886
  script type = 'application/ld+json'
    = article_schema

.article-show-subheader
  = render partial: 'shared/blog/categories'
  .breadcrumbs
    = link_to t('blog.article.home'), root_path
    .angle-bracket >
    = link_to t('blog.blog'), articles_path
    .angle-bracket >
    = link_to t("blog.categories.#{article.category}"), category_articles_path(article.category)
    .angle-bracket >
    span= article.title

#post.article-box
  = link_to 'âž¦', back_path, remote: true, class: 'back-link'

  h1.title= article.title

  .article-content
    article.post-body-show#article-body
      = md(article.body)
    .content-table#headers
      .article-info
        .info-item
          span= t('blog.article.author')
          span.author= article.member.name
          ',
          span.position= article.member.position
        .info-item
          span= t('blog.article.published')
          span= article.created_at.strftime('%d %b %Y')
        .info-item
          span= t('blog.article.time_to_read')
          span= t('blog.article.mins_to_read', minutes: time_to_read(article.body))
      div#div-table-content
        p.contents#contents= t('blog.article.contents')
      div#share-article
        hr
        div
          = svg('share-alt-solid')
          = link_to 'https://www.facebook.com/sharer/sharer.php?u=https://' + request.domain + request.fullpath, target: '_blank', title: 'twitter', rel: :noopener do
            = svg('facebook', local_assigns[:klass])
          = link_to 'https://www.linkedin.com/shareArticle?mini=true&url=https://' + request.domain + request.fullpath, target: '_blank', title: 'linkedin', rel: :noopener do
            = svg('linkedin', local_assigns[:klass])
          = link_to 'https://twitter.com/intent/tweet?url=https://' + request.domain + request.fullpath, target: '_blank', title: 'twitter', rel: :noopener do
            = svg('twitter', local_assigns[:klass])
    javascript:
      var selectedHeader = undefined;
      var allTags = document.getElementById('article-body').children;
      let allTagsArr = [].slice.call(allTags);
      allTagsArr.forEach((node) => {
        if (!document.getElementById('article-body').lastChild || /^h2$/i.test(node.nodeName)) {
          var spanElement = document.createElement('span');
          spanElement.id = node.innerHTML;
          spanElement.style.display = 'inherit';
          document.getElementById('article-body').appendChild(spanElement);
        }
        if (document.getElementById('article-body').lastChild.tagName == 'SPAN') {
          document.getElementById('article-body').lastChild.appendChild(node);
        }
      })
      var articlesSpan = document.getElementById('article-body').getElementsByTagName('SPAN');
      var articlesSpanArr = [].slice.call(articlesSpan);
      articlesSpanArr.forEach((span) => {
        var spanChildrens = [].slice.call(span.children);
        spanChildrens.forEach((childrenTags) => {
          if (!span.lastChild || /^h3$/i.test(childrenTags.nodeName)) {
            var spanElement = document.createElement('span');
            spanElement.id = childrenTags.innerHTML;
            span.appendChild(spanElement);
          }
          if (span.lastChild.tagName == 'SPAN') {
            span.lastChild.appendChild(childrenTags);
          }
        })
      })
      var headersArr = document.querySelectorAll("H2, H3");
      let arr = [].slice.call(headersArr);
      arr.forEach((header, index) => {
        if (header.tagName == 'H3') {
          header.id = header.innerHTML;
        }
        var qwe = document.createTextNode(header.innerHTML);
        var newParag = document.createElement('a');
        newParag.appendChild(qwe);
        newParag.href = '#' + header.innerHTML;
        if (header.tagName == 'H3') {
          newParag.className = 'article-header-h3'
        } else {
          newParag.className = 'article-header-h2'
        }
        document.getElementById("div-table-content").appendChild(newParag);
      })
      window.addEventListener('scroll', () => {
        const observer = new IntersectionObserver(entries => {
          entries.forEach(entry => {
            const id = entry.target.getAttribute('id');
            if (entry.intersectionRatio > 0) {
              document.querySelector(`a[href="#${id}"]`).classList.add('active');
            } else {
              document.querySelector(`a[href="#${id}"]`).classList.remove('active');
            }
          });
        });
        document.querySelectorAll('span[id]').forEach((link) => {
          observer.observe(link);
        });
      });
- if recommended_articles.any?
  .recommended
    h3= t('blog.recommended')
    .articles
      = render partial: 'recommended_article', collection: recommended_articles, as: :recommended_article
